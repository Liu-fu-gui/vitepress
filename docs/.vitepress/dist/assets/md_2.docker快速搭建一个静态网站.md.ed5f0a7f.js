import{_ as e,o as a,c as i,O as t}from"./chunks/framework.62020867.js";const k=JSON.parse('{"title":"2.docker快速搭建一个静态网站","description":"","frontmatter":{},"headers":[],"relativePath":"md/2.docker快速搭建一个静态网站.md","filePath":"md/2.docker快速搭建一个静态网站.md"}'),r={name:"md/2.docker快速搭建一个静态网站.md"},o=t('<h1 id="_2-docker快速搭建一个静态网站" tabindex="-1">2.docker快速搭建一个静态网站 <a class="header-anchor" href="#_2-docker快速搭建一个静态网站" aria-label="Permalink to &quot;2.docker快速搭建一个静态网站&quot;">​</a></h1><h2 id="_1-创建一个文件夹-mkdir-mytext-里面放脚本和源代码" tabindex="-1">1.创建一个文件夹，mkdir mytext 里面放脚本和源代码 <a class="header-anchor" href="#_1-创建一个文件夹-mkdir-mytext-里面放脚本和源代码" aria-label="Permalink to &quot;1.创建一个文件夹，mkdir mytext 里面放脚本和源代码&quot;">​</a></h2><h2 id="_2-创建myfiles文件-用来存放源代码-mkdir-myfiles" tabindex="-1">2. 创建myfiles文件，用来存放源代码，mkdir myfiles <a class="header-anchor" href="#_2-创建myfiles文件-用来存放源代码-mkdir-myfiles" aria-label="Permalink to &quot;2. 创建myfiles文件，用来存放源代码，mkdir myfiles&quot;">​</a></h2><p><img src="https://cdn.staticaly.com/gh/Liu-wei-tao/myimg@master/%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%9B%BE%E7%89%87/image-20230521121945695.241wn2h1v6ps.webp" alt="image-20230521121945695"></p><h2 id="_3-dockerfile是一个文件-touch-dockerfile" tabindex="-1">3. dockerfile是一个文件，touch Dockerfile <a class="header-anchor" href="#_3-dockerfile是一个文件-touch-dockerfile" aria-label="Permalink to &quot;3.  dockerfile是一个文件，touch Dockerfile&quot;">​</a></h2><p><img src="https://cdn.staticaly.com/gh/Liu-wei-tao/myimg@master/%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%9B%BE%E7%89%87/image-20230521122311349.55xp4oko9800.webp" alt="image-20230521122311349"></p><h2 id="_4-进入myfiles-执行-git-clone-github链接" tabindex="-1">4. 进入myfiles 执行 git clone github链接 <a class="header-anchor" href="#_4-进入myfiles-执行-git-clone-github链接" aria-label="Permalink to &quot;4. 进入myfiles 执行 git clone github链接&quot;">​</a></h2><p><img src="https://cdn.staticaly.com/gh/Liu-wei-tao/myimg@master/%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%9B%BE%E7%89%87/image-20230521121846431.1d1dlivfp09s.webp" alt="image-20230521121846431"></p><h2 id="_5-进入到mytext-文件夹中" tabindex="-1">5.进入到mytext 文件夹中 <a class="header-anchor" href="#_5-进入到mytext-文件夹中" aria-label="Permalink to &quot;5.进入到mytext 文件夹中&quot;">​</a></h2><h2 id="_6-开始构建自定义的nginx镜像" tabindex="-1">6.开始构建自定义的nginx镜像 <a class="header-anchor" href="#_6-开始构建自定义的nginx镜像" aria-label="Permalink to &quot;6.开始构建自定义的nginx镜像&quot;">​</a></h2><p>docker build -t mynginx .</p><p><img src="https://cdn.staticaly.com/gh/Liu-wei-tao/myimg@master/%E6%96%87%E6%A1%A3%E7%BD%91%E7%AB%99%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%9B%BE%E7%89%87/image-20230521122641055.9pkaosfh67o.webp" alt="image-20230521122641055"></p><h2 id="_7-构建完成后-执行以下命令运行基于自定义镜像的nginx容器" tabindex="-1">7.构建完成后，执行以下命令运行基于自定义镜像的nginx容器 <a class="header-anchor" href="#_7-构建完成后-执行以下命令运行基于自定义镜像的nginx容器" aria-label="Permalink to &quot;7.构建完成后，执行以下命令运行基于自定义镜像的nginx容器&quot;">​</a></h2><p>docker run -d -p 82:80 mynginx</p><p>这个命令将在后台运行一个基于 <code>mynginx</code>镜像的容器，并将容器的80端口映射到主机的82端口。</p><h2 id="_8-访问链接" tabindex="-1">8.访问链接 <a class="header-anchor" href="#_8-访问链接" aria-label="Permalink to &quot;8.访问链接&quot;">​</a></h2><p>修改docker容器里的文件</p><p>docker exec -it f96475b74743 /bin/bash</p>',18),c=[o];function d(m,l,n,s,h,_){return a(),i("div",null,c)}const p=e(r,[["render",d]]);export{k as __pageData,p as default};
